"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.getIndexOfPawnInDeadlock=exports.getMoves=exports.getPawnsIAtPosition=exports.getStartPawns=exports.isPawn=void 0;const obray_1=require("../../lib/obray"),types_1=require("../types"),board_1=require("./board"),limits_1=require("./limits"),player_1=require("./player"),position_1=require("./position"),roles_1=require("./roles");function isPawn(e){return obray_1.hasKey(e,"player",player_1.isPlayer)&&obray_1.hasKey(e,"position",position_1.isPosition)&&obray_1.hasKey(e,"roles",roles_1.isRoles)}function getStartPawns(e){return obray_1.deepClone(START_PAWNS[e])}function getPawnsIAtPosition(e,o){for(let t=0,r=e.length;t<r;t++)if(position_1.isSamePosition(e[t].position,o))return t;return-1}function getMoves(e,o,t){const r=null===o||void 0===o?void 0:o[e];if(!r)return[];const s=board_1.getFieldColor(r.position);switch(r.roles[s]){case types_1.ERole.KNIGHT:return getKnightMoves(o,e,t);case types_1.ERole.QUEEN:return getBishopMoves(o,e,t).concat(getRookMoves(o,e,t));case types_1.ERole.BISHOP:return getBishopMoves(o,e,t);case types_1.ERole.ROOK:return getRookMoves(o,e,t)}}function getIndexOfPawnInDeadlock(e,o){if(!limits_1.isSmallestLimits(o))return-1;const t=getPawnsIAtPosition(e,{row:o.minRow+1,col:o.minCol+1});if(-1===t)return-1;const r=e[t];return r.roles[board_1.getFieldColor(r.position)]===types_1.ERole.KNIGHT?t:-1}exports.isPawn=isPawn,exports.getStartPawns=getStartPawns,exports.getPawnsIAtPosition=getPawnsIAtPosition,exports.getMoves=getMoves,exports.getIndexOfPawnInDeadlock=getIndexOfPawnInDeadlock;const START_PAWNS={[types_1.EPlayer.RED]:[createPawn(types_1.EPlayer.RED,types_1.EFieldColor.RED,7,0),createPawn(types_1.EPlayer.RED,types_1.EFieldColor.GREEN,7,1),createPawn(types_1.EPlayer.RED,types_1.EFieldColor.YELLOW,7,2),createPawn(types_1.EPlayer.RED,types_1.EFieldColor.BLUE,7,3)],[types_1.EPlayer.GREEN]:[createPawn(types_1.EPlayer.GREEN,types_1.EFieldColor.GREEN,7,7),createPawn(types_1.EPlayer.GREEN,types_1.EFieldColor.YELLOW,6,7),createPawn(types_1.EPlayer.GREEN,types_1.EFieldColor.BLUE,5,7),createPawn(types_1.EPlayer.GREEN,types_1.EFieldColor.RED,4,7)],[types_1.EPlayer.YELLOW]:[createPawn(types_1.EPlayer.YELLOW,types_1.EFieldColor.YELLOW,0,7),createPawn(types_1.EPlayer.YELLOW,types_1.EFieldColor.BLUE,0,6),createPawn(types_1.EPlayer.YELLOW,types_1.EFieldColor.RED,0,5),createPawn(types_1.EPlayer.YELLOW,types_1.EFieldColor.GREEN,0,4)],[types_1.EPlayer.BLUE]:[createPawn(types_1.EPlayer.BLUE,types_1.EFieldColor.BLUE,0,0),createPawn(types_1.EPlayer.BLUE,types_1.EFieldColor.RED,1,0),createPawn(types_1.EPlayer.BLUE,types_1.EFieldColor.GREEN,2,0),createPawn(types_1.EPlayer.BLUE,types_1.EFieldColor.YELLOW,3,0)]};function createPawn(e,o,t,r){return{player:e,position:{row:t,col:r},roles:roles_1.getRoles(o)}}function getKnightMoves(e,o,t){const r=e[o].position;return[{row:2,col:1},{row:1,col:2},{row:-2,col:1},{row:-1,col:2},{row:2,col:-1},{row:1,col:-2},{row:-2,col:-1},{row:-1,col:-2}].map(e=>({row:r.row+e.row,col:r.col+e.col})).filter(r=>getMoveType(e,o,r,t))}function getBishopMoves(e,o,t){return[...moveGenerator(e,o,t,{row:1,col:1}),...moveGenerator(e,o,t,{row:-1,col:1}),...moveGenerator(e,o,t,{row:1,col:-1}),...moveGenerator(e,o,t,{row:-1,col:-1})]}function getRookMoves(e,o,t){return[...moveGenerator(e,o,t,{row:1,col:0}),...moveGenerator(e,o,t,{row:-1,col:0}),...moveGenerator(e,o,t,{row:0,col:1}),...moveGenerator(e,o,t,{row:0,col:-1})]}function moveGenerator(e,o,t,r){const s=e[o].position;let n=[],l=Object.assign({},s);for(;;){l.row+=r.row,l.col+=r.col;let s=getMoveType(e,o,l,t);if(s!==MoveType.INVALID&&n.push(Object.assign({},l)),s!==MoveType.NORMAL)break}return n}var MoveType;function getMoveType(e,o,t,r){const s=e[o],n=e[getPawnsIAtPosition(e,t)];return limits_1.isWithinLimits(t,r)?n?n.player!==s.player?MoveType.BEATING:MoveType.INVALID:MoveType.NORMAL:MoveType.INVALID}!function(e){e[e.INVALID=0]="INVALID",e[e.NORMAL=1]="NORMAL",e[e.BEATING=2]="BEATING"}(MoveType||(MoveType={}));