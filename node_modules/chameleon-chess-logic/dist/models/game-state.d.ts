import { IGameState, EPlayer, IPosition } from '../types';
/**
 * Type guard for `IGameState`.
 *
 * It checks all the keys and types of the object. It will also perform further
 * checks to confirm the validity of the game state, that go beyond simple type
 * checking.
 *
 * E.g. if there are several pawns on the same field (which is not possible
 * according to the game rules), this function will return false, as well.
 */
export declare function isGameState(gs: any): gs is IGameState;
export declare function getStartGameState(players: {
    [player in EPlayer]: boolean;
}): IGameState;
export declare function isValidMove(gs: IGameState, pawnI: number, destination: IPosition): boolean;
/** Just makes the move. No validity check! Use isValidMove() to check validity first. */
export declare function updateGameState(gs: IGameState, pawnI: number, destination: IPosition): IGameState;
export declare function isGameOver(gs: IGameState): boolean;
/**
 * This is for the AI. It returns all possible game states that could succeed
 * the current one. Ergo, it returns the resulting game states for all moves
 * that can be made in the current game state. The AI now has to choose
 * intelligently, which game state to select to continue.
 */
export declare function getNextGameStates(gs: IGameState): IGameState[];
